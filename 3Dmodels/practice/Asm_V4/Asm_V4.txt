Workflow:

    
    <<Cuve>>.Placement.multiply(<<Cuve>>.<<Body.LCS_1.>>.Placement).multiply(<<PLA_Screw_1>>.Placement).multiply(.<<Body.LCS_0.>>.Placement.inverse())

    <<LCS_Piston3>>.Placement.multiply( <<PLA_Piston3>>.Placement ).multiply( .<<Body.LCS_axis.>>.Placement.inverse() )
    <<LCS_Bielle3>>.Placement.multiply( <<PLA_Bielle3>>.Placement ).multiply( .<<Body.LCS_0.>>.Placement.inverse() )
    
    <<Crankshaft>>.Placement.multiply(<<Crankshaft>>.<<Body.LCS_C1.>>.Placement)
    Gui.activeDocument().activeView().saveImage('/home/hubertz/Documents/3Dcad/FreeCAD/Data/Asm_V4/Images/toto.png',1328,479,'Current')
    filename='C:/Users/CAE User/Desktop/Sim_Pix/test_%d_%d.png' % (i,j)
    
>>> for angle in range(0,365,5):
... 	App.getDocument("asm_V4").PLA_Crankshaft.Placement = App.Placement(App.Vector(0,0,0), App.Rotation(0,angle,0), App.Vector(0,0,0))
... 	App.ActiveDocument.recompute()
        FreeCADGui.updateGui()
        imagename = '/home/hubertz/Documents/3Dcad/FreeCAD/Data/Asm_V4/Images/Pict_%d.png' % angle
>>> Gui.ActiveDocument.ActiveView.saveImage(imagename,1280,720,'Current')

    ╔═══════════════════════════════════════════════╗
    ║              to create a new Part             ║
    ╚═══════════════════════════════════════════════╝

*   new document → new Part
>>> App.activeDocument().Tip = App.activeDocument().addObject('App::DocumentObjectGroup','Constraints')
    → move (drag'n-drop in tree) to Part container
    → new Body
>>> App.activeDocument().Body.newObject('PartDesign::CoordinateSystem','LCS_C1')
    → save-as: PartName.fcstd
    
    
    ╔═══════════════════════════════════════════════╗
    ║             insert a Part with                ║
    ║        target_LCS in parent assembly          ║
    ╚═══════════════════════════════════════════════╝

*   General expression:
>>> App.getDocument('assembly').addObject('App::Link','child_PART')
>>> App.ActiveDocument.addObject('App::Placement','relative_PLA')
    <<target_LCS>>.Placement.multiply( <<relative_PLA>>.Placement ).multiply( .<<Body.attachment_LCS.>>.Placement.inverse() )

*   Cuve:
>>> App.getDocument('asm_V4').addObject('App::Link','Cylindre1')
>>> App.ActiveDocument.addObject('App::Placement','PLA_Cylindre1')
    <<LCS_1>>.Placement.multiply( <<PLA_Cylindre1>>.Placement ).multiply( .<<Body.LCS.>>.Placement.inverse() )
    <<LCS_2>>.Placement.multiply( <<PLA_Cylindre2>>.Placement ).multiply( .<<Body.LCS.>>.Placement.inverse() )
    <<LCS_3>>.Placement.multiply( <<PLA_Cylindre3>>.Placement ).multiply( .<<Body.LCS.>>.Placement.inverse() )
    <<LCS_4>>.Placement.multiply( <<PLA_Cylindre4>>.Placement ).multiply( .<<Body.LCS.>>.Placement.inverse() )
    
>>> App.activeDocument().Body.newObject('PartDesign::CoordinateSystem','LCS_Clock1')
    <<Crankshaft>>.Placement.multiply( <<Crankshaft>>.<<Body.LCS_Clock1.>>.Placement )

>>> App.activeDocument().Body.newObject('PartDesign::Point','Point_Clock1')




*   Bague:
>>> App.getDocument('Bielle').addObject('App::Link','Bague')
    → select Part@Bague 
    → move Bague (the link) to Part@Bielle
>>> App.ActiveDocument.addObject('App::Placement','PLA_Bague')
    → move to Constraints
    → define PLA_Bague as "Translation Z=-13"
    <<LCS_0>>.Placement.multiply( <<PLA_Bague>>.Placement ).multiply( .<<Body.LCS_0.>>.Placement.inverse() )
    
    
    ╔═══════════════════════════════════════════════╗
    ║             insert a Part with                ║
    ║          target_LCS in sister part            ║
    ╚═══════════════════════════════════════════════╝
    
*   General expression:
    <<sister_PART>>.Placement.multiply( <<sister_PART>>.<<Body.target_LCS.>>.Placement ).multiply( <<relative_PLA>>.Placement ).multiply( .<<Body.attachment_LCS.>>.Placement.inverse() )

*   Screw_1:
>>> App.getDocument('Bielle').addObject('App::Link','Screw_1')
    → select Part@Screw_CHC 
    → move Screw_1 (the link) to Part@Bielle
>>> App.ActiveDocument.addObject('App::Placement','PLA_Screw_1')
    → move to Constraints
    → define PLA_Screw_1 as Identity (0 translation, 0 rotation)
    <<Cuve>>.Placement.multiply( <<Cuve>>.<<Body.LCS_1.>>.Placement ).multiply( <<PLA_Screw_1>>.Placement ).multiply( .<<Body.LCS_0.>>.Placement.inverse() )

*   Screw_2:
>>> App.getDocument('Bielle').addObject('App::Link','Screw_2')
    → select Part@Screw_CHC 
    → move Screw_2 (the link) to Part@Bielle
>>> App.ActiveDocument.addObject('App::Placement','PLA_Screw_2')
    → move to Constraints
    → define PLA_Screw_2 as "Roll 180°"
    <<Cuve>>.Placement.multiply( <<Cuve>>.<<Body.LCS_2.>>.Placement ).multiply( <<PLA_Screw_2>>.Placement ).multiply( .<<Body.LCS_0.>>.Placement.inverse() )

    
    
    
    ╔═══════════════════════════════════════════════╗
    ║                  older stuff                  ║
    ╚═══════════════════════════════════════════════╝


Bielle:
- new document → new Part → new Body → save-as: Bielle.fcstd
>>> App.activeDocument().Part = App.activeDocument().addObject('App::DocumentObjectGroup','Constraints')
→ move to Part
- App.activeDocument().Body.newObject('PartDesign::CoordinateSystem','LCS_0')
- make a sketch (called "Length" here) to materialise the part's 2nd hole
- App.activeDocument().Body.newObject('PartDesign::CoordinateSystem','LCS_1')
  → place on edge of previous sketch
- do design ...

Cuve:
- new document → new Part → new Body → save-as: Cuve.fcstd
- App.activeDocument().Body.newObject('PartDesign::CoordinateSystem','LCS_0')
- do design ...
- App.activeDocument().Body.newObject('PartDesign::CoordinateSystem','LCS_1')
  App.activeDocument().Body.newObject('PartDesign::CoordinateSystem','LCS_2')
  → place on holes

Bague (bronze autolubrifiant):
- new document → new Part → new Body → save-as: Bague.fcstd
- App.activeDocument().Body.newObject('PartDesign::CoordinateSystem','LCS_0')
- do design ... 

Screw_CHC:
- new document → new Part → new Body → save-as: Screw_CHC.fcstd
- App.activeDocument().Body.newObject('PartDesign::CoordinateSystem','LCS_0')
- do design ...

In Bielle (which becomes an assembly now !):
>>> App.getDocument('Bielle').addObject('App::Link','Cuve')
    → select Part@Cuve
    → move (drag'n-drop) Cuve (which is an App::Link) to Part@Bielle
    → select Cuve and in Placement → select Expression:
    LCS_1.Placement.multiply(.<<Body.LCS_0.>>.Placement.inverse())
>>> App.getDocument('Bielle').addObject('App::Link','Bague')
    → select Part@Bague
    → move (drag'n-drop) Bague (which is an App::Link) to Part@Bielle
    >>> App.ActiveDocument.addObject('App::Placement','PLA_1')
    → move to Constraints
    → define as "Translation Z=-13"
    → select Bague and in Placement → select Expression:
    LCS_0.Placement.multiply( .<<Body.LCS_0.>>.Placement.inverse() )
    LCS_0.Placement.multiply(PLA_1.Placement).multiply(.<<Body.LCS_0.>>.Placement.inverse())
- App.getDocument('Bielle').addObject('App::Link','Screw_1')
    → select Part@Screw_1
    → move (drag'n-drop) Screw_1 (which is an App::Link) to Part@Bielle
    <<Cuve>>.Placement.multiply( <<Cuve>>.<<Body.LCS_1.>>.Placement ).multiply( .<<Body.LCS_0.>>.Placement.inverse() )
- App.getDocument('Bielle').addObject('App::Link','Screw_2')
    → select Part@Screw_2
    → move (drag'n-drop) Screw_2 (which is an App::Link) to Part@Bielle
     >>> App.ActiveDocument.addObject('App::Placement','PLA_2')
    → move to Constraints
    → define as "Roll 180°"
    → select Screw_2 and in Placement → select Expression:
    <<Cuve>>.Placement.multiply( <<Cuve>>.<<Body.LCS_2.>>.Placement ).multiply( .<<Body.LCS_0.>>.Placement.inverse() )
    <<Cuve>>.Placement.multiply( <<Cuve>>.<<Body.LCS_2.>>.Placement ).multiply(PLA_2.Placement).multiply( .<<Body.LCS_0.>>.Placement.inverse() )

  


>>> App.getDocument('Bielle').getObject('Sketch').setDatum(1,App.Units.Quantity('170.000000 mm'))
update ? recalculate ?

>>> App.ActiveDocument.addObject('App::Placement','PLA_1')
  
>>> App.activeDocument().Body.newObject('App::Placement','PLA_1')
>>> App.activeDocument().Tip = App.activeDocument().addObject('App::DocumentObjectGroup','Group')

LCS_0.Placement.multiply( App.Placement( App.Vector(0,0,-13), App.Rotation(0,0,0), App.Vector(0,0,0) ) ).multiply(.<<Body.LCS_0.>>.Placement.inverse())
  
toto = App.Placement(App.Vector(0,0,-13), App.Rotation(0,0,0), App.Vector(0,0,0))
titi = App.Placement(App.Vector(0,0,-13))
  
  
App.ActiveDocument.addObject('PartDesign::CoordinateSystem','LCS_1')
App.activeDocument().Body.newObject('PartDesign::CoordinateSystem','LCS')


App.getDocument('Assembly').addObject('App::Link','Part_1')
App.getDocument('asm_level1').addObject('App::Link','Bitoniau_1').setLink(App.getDocument('Bitoniau').Part)
App.getDocument("asm_level1").getObject("Part").addObject(App.getDocument("asm_level1").getObject("Bitoniau_1"))


FreeCAD.getDocument("Assembly").getObject("Part_1").LinkedObject = (App.getDocument('Part').getObject('Body'),'')

asm_level1:
LCS001.Placement.multiply(.<<Body.LCS_1.>>.Placement.inverse())
LCS002.Placement.multiply(.<<Body.LCS_1.>>.Placement.inverse())

asm_level2:
LCS001.Placement.multiply(.<<Body.LCS.>>.Placement.inverse())
LCS002.Placement.multiply(.<<Body.LCS.>>.Placement.inverse())
LCS003.Placement.multiply(.<<Body.LCS.>>.Placement.inverse())

asm_level3:
LCS001.Placement.multiply(.<<Body.LCS.>>.Placement.inverse())
LCS002.Placement.multiply(.<<Body.LCS.>>.Placement.inverse())
LCS003.Placement.multiply(.<<Body.LCS.>>.Placement.inverse())
LCS004.Placement.multiply(.<<Body.LCS.>>.Placement.inverse())

Gui.Selection.addSelection('asm_level3','Part','Link.Link002.Body.LCS_1.')
Gui.Selection.addSelection('asm_level3','Part','Body.LCS004.')

.Link_asmL2_1.Body.LCS001.Placement.multiply(.<<Body.LCS_1.>>.Placement.inverse())

<<Link_Bitoniau>>.<<Body.LCS_1>>.Placement.multiply(.<<Body.LCS_2.>>.Placement.inverse())


asm_level3.Part.Link.Link002.Body.LCS_1.
Part_1.<<Body.pLCS_2.>>._pla.multiply(.<<Body.pLCS_1.>>._pla.inverse())

Bitoniau_1.Placement.multiply( Bitoniau_1.<<Body.LCS_2.>>.Placement ).multiply( .<<Body.LCS_3.>>.Placement.inverse() )

<<Link_Bitoniau>>.Placement.multiply( <<Link_Bitoniau>>.<<Body.LCS_1.>>.Placement ).multiply( .<<Body.LCS_3.>>.Placement.inverse() )
<<Link_Bitoniau>>.Placement.multiply( <<Link_Bitoniau>>.<<Body.LCS_1.>>.Placement.multiply( .<<Body.LCS_3.>>.Placement.inverse() ) )

<<Link_asmL2_1>>.Placement.multiply( <<Link_asmL2_1.Link_Bitoniau.>>.Placement ).multiply( <<Link_Bitoniau>>.<<Body.LCS_1.>>.Placement ).multiply( .<<Body.LCS_3.>>.Placement.inverse() )



Part_0 (App::Part)
  │
  ├─ Body
  │    ├─ LCS_0
  │    ├─ Sketch
  │    ├─ LCS_1
  │    ├─ LCS_2
  │    ├─ LCS_3
  │    └─ Solid
  │
  ├─ Part_1 (App::Part)
  │    │
  │    └─ Body
  │         ├─ LCS_0 → LCS_1 @Part_0 ( = parent assembly)
  │         ├─ Solid
  │         ├─ LCS_1
  │         └─ LCS_2
  │
  ├─ Part_2.1 (App::Part)
  │    │
  │    └─ Body
  │         ├─ LCS_0 → LCS_1 @Part_1 (= sister part)
  │         └─ Solid
  │
  └─ Part_2.2 (App::Part)
       │
       └─ Body
            ├─ LCS_0 → LCS_2 @Part_1 + rotation (= Placement)
            └─ Solid

  ┌─┐
  │ ├
  └─┘
    _
   ╱ ╲
   ╲_╱

  
Part (App::Part)               = Part or Assembly
  │
  ├─ Constraints               = Group
  │    ├─ PLA_Part             = relative Placement between attachment_LCS and target_LCS
  │    ┊
  │
  ├─ LCS_0                     ┐
  ├─ DatumPlane                │
  ├─ Sketch                    │
  ├─ LCS_1                     ├ references
  ├─ DatumAxis                 │
  ├─ LCS_2                     │
  ├─ ...                       ┘
  │
  ├─ Body (App::PartDesign)    = geometries
  │    ├─ Solid_1
  │    ├─ Solid_2
  │    ┊
  │
  ├─ Part (App::Link)          = another App::Part
  │    │
  │    ├─ LCS_0
  ┊    ┊





